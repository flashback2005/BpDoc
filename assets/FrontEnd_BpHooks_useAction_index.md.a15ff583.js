import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.9dd9ad44.js";const u=JSON.parse('{"title":"触发合约方法","description":"","frontmatter":{},"headers":[],"relativePath":"FrontEnd/BpHooks/useAction/index.md","filePath":"FrontEnd/BpHooks/useAction/index.md","lastUpdated":1693990675000}'),p={name:"FrontEnd/BpHooks/useAction/index.md"},o=l(`<h1 id="触发合约方法" tabindex="-1">触发合约方法 <a class="header-anchor" href="#触发合约方法" aria-label="Permalink to &quot;触发合约方法&quot;">​</a></h1><h3 id="触发流程-1" tabindex="-1">触发流程 1： <a class="header-anchor" href="#触发流程-1" aria-label="Permalink to &quot;触发流程 1：&quot;">​</a></h3><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h3><p>页面触发 useRead() -&gt; contractsApi/useXXX 的 bpRead() bpRead 进而触发合约事件</p><h2 id="useaction" tabindex="-1">useAction <a class="header-anchor" href="#useaction" aria-label="Permalink to &quot;useAction&quot;">​</a></h2><p>包括 <strong>bpRead</strong>、<strong>bpWrite</strong></p><blockquote><p>@/service/bpAction</p></blockquote><h4 id="主要作用-页面数据状态管理-与链交互的触发时机" tabindex="-1">主要作用：页面数据状态管理，与链交互的触发时机 <a class="header-anchor" href="#主要作用-页面数据状态管理-与链交互的触发时机" aria-label="Permalink to &quot;主要作用：页面数据状态管理，与链交互的触发时机&quot;">​</a></h4><p>一般在 页面/组件、pinia 下使用</p><p>所有与链交互的方法必须使用这两个 hook，对应的读/写</p><h3 id="useread" tabindex="-1">useRead <a class="header-anchor" href="#useread" aria-label="Permalink to &quot;useRead&quot;">​</a></h3><table><thead><tr><th>参数</th><th>默认值</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>callback</td><td>undefined</td><td>Function</td><td>触发 bpRead 的 hook</td></tr><tr><td>extra</td><td>undefined</td><td>Object</td><td>额外配置项</td></tr></tbody></table><p>额外配置描述:</p><table><thead><tr><th>参数</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>default</td><td>any</td><td>undefined</td><td>返回数据的默认值(必传)</td></tr><tr><td>interval</td><td>number</td><td>undefined</td><td>轮询时间</td></tr><tr><td>watcher</td><td>any</td><td>undefined</td><td>监听者 使用方式和 watch 一致</td></tr><tr><td>immediate</td><td>boolean</td><td>true</td><td>是否立即执行</td></tr><tr><td>noAccount</td><td>boolean</td><td>false</td><td>是否 不依赖钱包</td></tr></tbody></table><p>返回值描述：</p><table><thead><tr><th></th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>data</td><td>Ref</td><td>callback 返回的值</td></tr><tr><td>dataEx</td><td>Object</td><td>工具包</td></tr></tbody></table><p>dataEx 工具包描述：</p><table><thead><tr><th>名字</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>loading</td><td>boolean</td><td>数据的加载状态</td></tr><tr><td>status</td><td>boolean</td><td>请求结果状态</td></tr><tr><td>message</td><td>string</td><td>请求结果消息，如果成功，则为 &#39;&#39;</td></tr><tr><td>refresh</td><td>Function</td><td>重新请求数据</td></tr><tr><td>cancel</td><td>Function</td><td>取消请求</td></tr></tbody></table><p>useRead 一般是一旦写了就自动跑一遍，如果不想立即自动跑一遍的话，可以配置：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">data</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">dataEx</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useRead</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {}, { immediate: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 指定时期才手动执行:</span></span>
<span class="line"><span style="color:#E1E4E8;">  dataEx.</span><span style="color:#B392F0;">refresh</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}, </span><span style="color:#79B8FF;">3000</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">data</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">dataEx</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useRead</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {}, { immediate: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 指定时期才手动执行:</span></span>
<span class="line"><span style="color:#24292E;">  dataEx.</span><span style="color:#6F42C1;">refresh</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}, </span><span style="color:#005CC5;">3000</span><span style="color:#24292E;">);</span></span></code></pre></div><p>一般 write 请求后，需要重新刷新 read 的数据，可以借助 refresh</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">doWrite</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useWrite</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 一些 写 的方法...</span></span>
<span class="line"><span style="color:#E1E4E8;">  dataEx.</span><span style="color:#B392F0;">refresh</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">doWrite</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useWrite</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 一些 写 的方法...</span></span>
<span class="line"><span style="color:#24292E;">  dataEx.</span><span style="color:#6F42C1;">refresh</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>一般使用栗子：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">balanceData</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">balanceDataEx</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useRead</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> emetObj.</span><span style="color:#B392F0;">getBalance</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 记得return出去给 balanceData</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">balanceData</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">balanceDataEx</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useRead</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> emetObj.</span><span style="color:#6F42C1;">getBalance</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 记得return出去给 balanceData</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><h3 id="usewrite" tabindex="-1">useWrite <a class="header-anchor" href="#usewrite" aria-label="Permalink to &quot;useWrite&quot;">​</a></h3><table><thead><tr><th>参数</th><th>默认值</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>callback</td><td>undefined</td><td>Function</td><td>触发 bpRead 的 hook</td></tr></tbody></table><p>返回值描述：</p><table><thead><tr><th></th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>handleFunc</td><td>Function</td><td>触发函数</td></tr><tr><td>load</td><td>boolean</td><td>是否加载中</td></tr></tbody></table><p>一般使用栗子：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">handleDecimal</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">loadDecimal</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useWrite</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> emetObj.</span><span style="color:#B392F0;">getDecimals</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">   result </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> dataEx.</span><span style="color:#B392F0;">refresh</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">bp-button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-load</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;loadDecimal&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">@click=&quot;handleDecimal&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">handleDecimal</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">loadDecimal</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useWrite</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">result</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> emetObj.</span><span style="color:#6F42C1;">getDecimals</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">   result </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> dataEx.</span><span style="color:#6F42C1;">refresh</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">bp-button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-load</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;loadDecimal&quot;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">@click=&quot;handleDecimal&quot;</span><span style="color:#24292E;"> /&gt;</span></span></code></pre></div><h2 id="useajax" tabindex="-1">useAjax <a class="header-anchor" href="#useajax" aria-label="Permalink to &quot;useAjax&quot;">​</a></h2><h4 id="主要作用" tabindex="-1">主要作用： <a class="header-anchor" href="#主要作用" aria-label="Permalink to &quot;主要作用：&quot;">​</a></h4><p>请求封装为 hook</p><p>包含请求方法：get、post、patch、put、delete，对应名字 useGet、useXxx...</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">data</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">dataEx</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useGet</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/api/whoAmI&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 请求参数，如果需要响应式，则可利用 const myParams = reactive({aaa: 123});</span></span>
<span class="line"><span style="color:#E1E4E8;">  params: myParams,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">before</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">axios</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 这里是请求之前做些事情，</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 你可以在这里单独设置axios请求头</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// return 的值，就是 params(请求参数)，如果 不return，则取上面 myParams 作为请求参数</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">after</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">resp</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 这里是请求之后做些事情，</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 这里可以拿到响应体结果（axios拦截器过滤的结果）</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// return 的值，就是 data 的值</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// true表示当请求进行中的时候(loading)，可以继续请求，即loading只是做个样子, 默认否</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 当noLoadBlock是true的时候，下一次请求则会强行取消上一次请求</span></span>
<span class="line"><span style="color:#E1E4E8;">  noLoadBlock: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 是否立即执行，默认否</span></span>
<span class="line"><span style="color:#E1E4E8;">  immediate: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 是否依赖钱包，当true的时候，需要成功连接钱包后才会执行，默认否</span></span>
<span class="line"><span style="color:#E1E4E8;">  wallet: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 默认值, 即请求之前，data的站位值</span></span>
<span class="line"><span style="color:#E1E4E8;">  default: </span><span style="color:#9ECBFF;">&#39;默认值&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cancel</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  dataEx.</span><span style="color:#B392F0;">cancel</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 表示取消当前请求</span></span>
<span class="line"><span style="color:#E1E4E8;">  dataEx.</span><span style="color:#B392F0;">refresh</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 表示重新请求</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// dataEx.loading 表示请求中</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-load</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;dataEx.loading&quot;</span><span style="color:#E1E4E8;">&gt; {{ data }} &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">data</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">dataEx</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useGet</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/api/whoAmI&#39;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 请求参数，如果需要响应式，则可利用 const myParams = reactive({aaa: 123});</span></span>
<span class="line"><span style="color:#24292E;">  params: myParams,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">before</span><span style="color:#24292E;">(</span><span style="color:#E36209;">axios</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 这里是请求之前做些事情，</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 你可以在这里单独设置axios请求头</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// return 的值，就是 params(请求参数)，如果 不return，则取上面 myParams 作为请求参数</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">after</span><span style="color:#24292E;">(</span><span style="color:#E36209;">resp</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 这里是请求之后做些事情，</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 这里可以拿到响应体结果（axios拦截器过滤的结果）</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// return 的值，就是 data 的值</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// true表示当请求进行中的时候(loading)，可以继续请求，即loading只是做个样子, 默认否</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 当noLoadBlock是true的时候，下一次请求则会强行取消上一次请求</span></span>
<span class="line"><span style="color:#24292E;">  noLoadBlock: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 是否立即执行，默认否</span></span>
<span class="line"><span style="color:#24292E;">  immediate: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 是否依赖钱包，当true的时候，需要成功连接钱包后才会执行，默认否</span></span>
<span class="line"><span style="color:#24292E;">  wallet: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 默认值, 即请求之前，data的站位值</span></span>
<span class="line"><span style="color:#24292E;">  default: </span><span style="color:#032F62;">&#39;默认值&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cancel</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  dataEx.</span><span style="color:#6F42C1;">cancel</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 表示取消当前请求</span></span>
<span class="line"><span style="color:#24292E;">  dataEx.</span><span style="color:#6F42C1;">refresh</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 表示重新请求</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// dataEx.loading 表示请求中</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-load</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;dataEx.loading&quot;</span><span style="color:#24292E;">&gt; {{ data }} &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;;</span></span></code></pre></div><h4 id="一些注意事项" tabindex="-1">一些注意事项： <a class="header-anchor" href="#一些注意事项" aria-label="Permalink to &quot;一些注意事项：&quot;">​</a></h4><ol><li>如果想用钱包地址作为 url 的一部分，或者是url一部分，是一个异步数据，可以借用<code>computed</code>转成<code>ref</code>再入参，并添加钱包依赖项</li></ol><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">url</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">computed</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`/api/userInfo/\${</span><span style="color:#E1E4E8;">appStore</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">defaultAccount</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">fetchUserInfo</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">fetchUserInfoEx</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useGet</span><span style="color:#E1E4E8;">(url, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    params: {},</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">after</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">resp</span><span style="color:#E1E4E8;">) {</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> resp.data;},</span></span>
<span class="line"><span style="color:#E1E4E8;">    wallet: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    immediate: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    default: {},</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">url</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">computed</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`/api/userInfo/\${</span><span style="color:#24292E;">appStore</span><span style="color:#032F62;">.</span><span style="color:#24292E;">defaultAccount</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">fetchUserInfo</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">fetchUserInfoEx</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useGet</span><span style="color:#24292E;">(url, {</span></span>
<span class="line"><span style="color:#24292E;">    params: {},</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">after</span><span style="color:#24292E;">(</span><span style="color:#E36209;">resp</span><span style="color:#24292E;">) {</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> resp.data;},</span></span>
<span class="line"><span style="color:#24292E;">    wallet: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    immediate: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    default: {},</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span></code></pre></div><ol start="2"><li>如果参数是异步数据，也可以借助computed，将整个params变成<code>ref</code>，再入参，注意是整个<code>params</code>，而不是仅仅把 <code>params</code> 的一部分变成 <code>ref</code></li></ol><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">params</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">computed</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> ({ address: appStore.defaultAccount }));</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">signNewReferReward</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">signNewReferRewardEx</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">usePost</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/api/signNewReferReward&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  params,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">after</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">resp</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> resp.data;</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  wallet: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  immediate: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">params</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">computed</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> ({ address: appStore.defaultAccount }));</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">signNewReferReward</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">signNewReferRewardEx</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">usePost</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/api/signNewReferReward&#39;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">  params,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">after</span><span style="color:#24292E;">(</span><span style="color:#E36209;">resp</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> resp.data;</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  wallet: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  immediate: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><hr><h2 id="bpaction" tabindex="-1">bpAction <a class="header-anchor" href="#bpaction" aria-label="Permalink to &quot;bpAction&quot;">​</a></h2><p>包括 <strong>bpRead</strong>、<strong>bpWrite</strong></p><blockquote><p>@/service/bpAction，</p></blockquote><h4 id="主要作用-用于交易的错误捕获与-message-提示。" tabindex="-1">主要作用：用于交易的错误捕获与 message 提示。 <a class="header-anchor" href="#主要作用-用于交易的错误捕获与-message-提示。" aria-label="Permalink to &quot;主要作用：用于交易的错误捕获与 message 提示。&quot;">​</a></h4><p>一般在<code>@/contractsApi/useXXX.ts</code>下使用</p><p>你完全可以不使用他们，但是错误消息就得你自己捕获与提示！</p><h3 id="bpread" tabindex="-1">bpRead <a class="header-anchor" href="#bpread" aria-label="Permalink to &quot;bpRead&quot;">​</a></h3><table><thead><tr><th>参数</th><th>默认值</th><th>类型</th><th>返回值</th><th>描述</th></tr></thead><tbody><tr><td>方法名，方法参数 1, 方法参数 2, 方法参数 3...</td><td>无</td><td>Function</td><td>status、datas</td><td>调用合约 read 方法</td></tr></tbody></table><p>返回值描述：</p><table><thead><tr><th></th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>status</td><td>boolean</td><td>状态，true 表示请求成功，false 表示请求失败</td></tr><tr><td>datas</td><td>Ref</td><td>请求返回的数据</td></tr><tr><td>message</td><td>string</td><td>报错的时候返回的消息</td></tr></tbody></table><p>栗子：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">status</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">datas</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bpRead</span><span style="color:#E1E4E8;">(coinObj.value.balanceOf, targetAddr);</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">status) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 进行数据整理</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> datas.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">item</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> item);</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">status</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">datas</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bpRead</span><span style="color:#24292E;">(coinObj.value.balanceOf, targetAddr);</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">status) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 进行数据整理</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">result</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> datas.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">((</span><span style="color:#E36209;">item</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> item);</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span></code></pre></div><h3 id="bpwrite" tabindex="-1">bpWrite <a class="header-anchor" href="#bpwrite" aria-label="Permalink to &quot;bpWrite&quot;">​</a></h3><table><thead><tr><th>参数</th><th>默认值</th><th>类型</th><th>返回值</th><th>描述</th></tr></thead><tbody><tr><td>消息, 方法名，方法参数 1, 方法参数 2, 方法参数 3...</td><td>无</td><td>Function</td><td>status、datas、message</td><td>调用合约 read 方法</td></tr></tbody></table><p>传递消息参数的描述：</p><table><thead><tr><th>方式</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>true</td><td>boolean</td><td>完全使用默认的消息，成功直接弹 success，错误直接弹错误消息(过滤后)</td></tr><tr><td>false</td><td>boolean</td><td>不使用默认的消息, 将返回一个 message，交给调用者自行处理</td></tr><tr><td>{ success: <code>$t(&#39;msg.3&#39;)</code>, error: true}</td><td>Object</td><td>成功自定义消息，错误使用默认</td></tr></tbody></table><blockquote><p>简单来说就是：true 使用默认，false 不弹消息，success 状态可以自定义消息</p></blockquote><p>返回值描述：</p><table><thead><tr><th></th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>status</td><td>boolean</td><td>状态，true 表示请求成功，false 表示请求失败</td></tr><tr><td>datas</td><td>Ref</td><td>请求返回的数据</td></tr><tr><td>message</td><td>string</td><td>报错的时候返回的消息</td></tr></tbody></table><p>栗子：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">status</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">datas</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bpWrite</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, coinObj.value.balanceOf, targetAddr);</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> status; </span><span style="color:#6A737D;">// write,一般字需要将请求的状态返回即可</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">status</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">datas</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bpWrite</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, coinObj.value.balanceOf, targetAddr);</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> status; </span><span style="color:#6A737D;">// write,一般字需要将请求的状态返回即可</span></span></code></pre></div><hr><h2 id="注意事项" tabindex="-1">注意事项： <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项：&quot;">​</a></h2><ol><li><p>所有的方法都不让返回 Promise.reject 状态，统一由 status 管理， status 为 true 则该交易请求成功，false 则失败</p></li><li><p>在 hooks 中有 <code>useRead</code> 和 <code>useWrite</code>，分别对应的读写， 一般时不需要错误消息处理的，如果有场景需求，则需要返回:</p></li><li><p>为了方便通讯，在<code>appStore</code>中，可以触发<code>refreshAllRead</code>方法，告诉全世界的<code>useRead</code>重跑，不管立即不立即执行的<code>useRead</code>。</p></li></ol><p>不能在<code>useRead</code>中使用该方法；一般是在触发一个按钮之后，触发。 该方法不要最好不要滥用。</p><pre><code>{
  status: false, // 状态标记为false
  message: string, // 错误消息
}
</code></pre><p>那么，在使用这两个 hooks 的时候，就能获取到错误消息</p>`,68),t=[o];function e(c,r,E,y,d,i){return a(),n("div",null,t)}const F=s(p,[["render",e]]);export{u as __pageData,F as default};
