import{_ as n,o as l,c as o,Q as a,k as s}from"./chunks/framework.a65da182.js";const _=JSON.parse('{"title":"倒计时","description":"","frontmatter":{},"headers":[],"relativePath":"FrontEnd/BPComponents/Countdown/index.md","filePath":"FrontEnd/BPComponents/Countdown/index.md","lastUpdated":1694162971000}'),p={name:"FrontEnd/BPComponents/Countdown/index.md"},e=a('<h1 id="倒计时" tabindex="-1">倒计时 <a class="header-anchor" href="#倒计时" aria-label="Permalink to &quot;倒计时&quot;">​</a></h1><blockquote><ul><li><p>分为组件与hook形式，</p></li><li><p>如果是普通的倒计时，使用hook即可</p></li><li><p>如果需要距离开始时间与距离结束时间，使用组件</p></li></ul></blockquote><h2 id="倒计时组件" tabindex="-1">倒计时组件 <a class="header-anchor" href="#倒计时组件" aria-label="Permalink to &quot;倒计时组件&quot;">​</a></h2><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>startTime</td><td>number</td><td>开始时间（毫秒）</td></tr><tr><td>endTime</td><td>number</td><td>结束时间（毫秒）</td></tr></tbody></table><h3 id="具体描述" tabindex="-1">具体描述 <a class="header-anchor" href="#具体描述" aria-label="Permalink to &quot;具体描述&quot;">​</a></h3><ol><li>组件会根据2个时间判断</li><li>如果时间没有到达开始时间，则可以显示当前时间到 <strong>达开始时间</strong> 的倒计时</li><li>如果过了开始时间，并且没有到达结束时间，则可显示当前时间到达 <strong>结束时间</strong> 的倒计时</li><li>如果超过了结束时间，则可显示 <strong>已结束</strong></li></ol><h3 id="使用方法" tabindex="-1">使用方法 <a class="header-anchor" href="#使用方法" aria-label="Permalink to &quot;使用方法&quot;">​</a></h3><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Countdown</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">:startTime=&quot;1684383070000&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">:endTime=&quot;1684386385000&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">Countdown</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">:startTime=&quot;1684383070000&quot;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">:endTime=&quot;1684386385000&quot;</span><span style="color:#24292E;"> /&gt;</span></span></code></pre></div><h3 id="源码" tabindex="-1">源码： <a class="header-anchor" href="#源码" aria-label="Permalink to &quot;源码：&quot;">​</a></h3><p><a href="./source">组件源码</a></p><h2 id="倒计时hook" tabindex="-1">倒计时hook <a class="header-anchor" href="#倒计时hook" aria-label="Permalink to &quot;倒计时hook&quot;">​</a></h2>',11),t=s("table",null,[s("thead",null,[s("tr",null,[s("th",null,"说明"),s("th",null,"参数类型"),s("th",null,"描述")])]),s("tbody",null,[s("tr",null,[s("td",null,"参数1"),s("td",null,"Ref"),s("td",null,"距离倒计时的时间 (毫秒)")]),s("tr",null,[s("td",null,"参数2"),s("td",null,"string"),s("td",null,"是以什么格式显示")]),s("tr",null,[s("td",null,"参数3"),s("td",{onFinish:""}),s("td",null,"倒计时结束的回调")])])],-1),c=a(`<h4 id="第二个参数的描述" tabindex="-1">第二个参数的描述： <a class="header-anchor" href="#第二个参数的描述" aria-label="Permalink to &quot;第二个参数的描述：&quot;">​</a></h4><p>Y:年、M:月、D:日、h:时、m:分、s:秒</p><h3 id="注意" tabindex="-1">注意： <a class="header-anchor" href="#注意" aria-label="Permalink to &quot;注意：&quot;">​</a></h3><p>第一个参数times，如果不是 <code>Ref</code>，则可以使用 <code>computed</code> 包装成 <code>Ref</code></p><h3 id="使用方法-1" tabindex="-1">使用方法 <a class="header-anchor" href="#使用方法-1" aria-label="Permalink to &quot;使用方法&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">tempTime</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">tempTimeEx</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useRead</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      time: </span><span style="color:#9ECBFF;">&#39;1716019596000&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  { default: { time: </span><span style="color:#9ECBFF;">&#39;0&#39;</span><span style="color:#E1E4E8;"> }, immediate: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用computed包装成Ref</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">times</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">computed</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> tempTime.value.time);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">countdownTime</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useCountdown</span><span style="color:#E1E4E8;">(times, </span><span style="color:#9ECBFF;">&#39;D&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">onFinish</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;倒计时结束&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">tempTime</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">tempTimeEx</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useRead</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      time: </span><span style="color:#032F62;">&#39;1716019596000&#39;</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  { default: { time: </span><span style="color:#032F62;">&#39;0&#39;</span><span style="color:#24292E;"> }, immediate: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用computed包装成Ref</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">times</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">computed</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> tempTime.value.time);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">countdownTime</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useCountdown</span><span style="color:#24292E;">(times, </span><span style="color:#032F62;">&#39;D&#39;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">onFinish</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;倒计时结束&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><h3 id="源码-1" tabindex="-1">源码： <a class="header-anchor" href="#源码-1" aria-label="Permalink to &quot;源码：&quot;">​</a></h3><p><a href="./hookSource">hook源码</a></p>`,8),r=[e,t,c];function i(E,y,d,h,u,m){return l(),o("div",null,r)}const C=n(p,[["render",i]]);export{_ as __pageData,C as default};
